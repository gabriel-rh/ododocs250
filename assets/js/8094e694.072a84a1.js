"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[1524],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return u}});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=l(r),u=i,f=m["".concat(c,".").concat(u)]||m[u]||p[u]||o;return r?t.createElement(f,a(a({ref:n},d),{},{components:r})):t.createElement(f,a({ref:n},d))}));function u(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1529:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var t=r(7462),i=r(3366),o=(r(7294),r(3905)),a=["components"],s={title:"odo service",sidebar_position:6},c={unversionedId:"command-reference/service",id:"command-reference/service",isDocsHomePage:!1,title:"odo service",description:"odo can deploy services with the help of operators.",source:"@site/docs/command-reference/service.md",sourceDirName:"command-reference",slug:"/command-reference/service",permalink:"/docs/command-reference/service",editUrl:"https://github.com/redhat-developer/odo/edit/main/website/docs/command-reference/service.md",version:"current",sidebarPosition:6,frontMatter:{title:"odo service",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"odo registry",permalink:"/docs/command-reference/registry"},next:{title:"odo storage",permalink:"/docs/command-reference/storage"}},l=[{value:"Creating a new service",id:"creating-a-new-service",children:[{value:"Inlining the manifest",id:"inlining-the-manifest",children:[]},{value:"Configuring the service",id:"configuring-the-service",children:[]}]},{value:"Deleting a service",id:"deleting-a-service",children:[]},{value:"Listing services",id:"listing-services",children:[]},{value:"Getting information about a service",id:"getting-information-about-a-service",children:[]}],d={toc:l};function p(e){var n=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"odo can deploy ",(0,o.kt)("em",{parentName:"p"},"services")," with the help of ",(0,o.kt)("em",{parentName:"p"},"operators"),"."),(0,o.kt)("p",null,"The list of available operators and services available for installation can be found with the ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-reference/catalog"},(0,o.kt)("inlineCode",{parentName:"a"},"odo catalog")," command"),"."),(0,o.kt)("p",null,"Services are created in the context of a ",(0,o.kt)("em",{parentName:"p"},"component"),", so you should have run ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-reference/create"},(0,o.kt)("inlineCode",{parentName:"a"},"odo create"))," before you deploy services."),(0,o.kt)("p",null,"The deployment of a service is done in two steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Define the service and store its definition in the devfile,"),(0,o.kt)("li",{parentName:"ol"},"Deploy the defined service to the cluster, using ",(0,o.kt)("inlineCode",{parentName:"li"},"odo push"),".")),(0,o.kt)("h2",{id:"creating-a-new-service"},"Creating a new service"),(0,o.kt)("p",null,"You can create a new service with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"odo service create\n")),(0,o.kt)("p",null,"For example, to create an instance of a Redis service named ",(0,o.kt)("inlineCode",{parentName:"p"},"my-redis-service"),", you can run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo catalog list services\nServices available through Operators\nNAME                      CRDs\nredis-operator.v0.8.0     RedisCluster, Redis\n\n$ odo service create redis-operator.v0.8.0/Redis my-redis-service\nSuccessfully added service to the configuration; do 'odo push' to create service on the cluster\n")),(0,o.kt)("p",null,"This command creates a Kubernetes manifest in the ",(0,o.kt)("inlineCode",{parentName:"p"},"kubernetes/")," directory, containing the definition of the service, and this file is referenced from the ",(0,o.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$  cat kubernetes/odo-service-my-redis-service.yaml \napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: Redis\nmetadata:\n  name: my-redis-service\nspec:\n  kubernetesConfig:\n    image: quay.io/opstree/redis:v6.2.5\n    imagePullPolicy: IfNotPresent\n    resources:\n      limits:\n        cpu: 101m\n        memory: 128Mi\n      requests:\n        cpu: 101m\n        memory: 128Mi\n    serviceType: ClusterIP\n  redisExporter:\n    enabled: false\n    image: quay.io/opstree/redis-exporter:1.0\n  storage:\n    volumeClaimTemplate:\n      spec:\n        accessModes:\n        - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ cat devfile.yaml\n[...]\ncomponents:\n- kubernetes:\n    uri: kubernetes/odo-service-my-redis-service.yaml\n  name: my-redis-service\n[...]\n")),(0,o.kt)("p",null,"Note that the name of the created instance is optional. If you do not provide a name, it will be the lowercased name of the service. For example, the following command will create an instance of a Redis service named ",(0,o.kt)("inlineCode",{parentName:"p"},"redis"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service create redis-operator.v0.8.0/Redis\n")),(0,o.kt)("h3",{id:"inlining-the-manifest"},"Inlining the manifest"),(0,o.kt)("p",null,"By default, a new manifest is created in the ",(0,o.kt)("inlineCode",{parentName:"p"},"kubernetes/")," directory, referenced from the ",(0,o.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," file. It is possible to inline the manifest inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," file using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--inlined")," flag:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service create redis-operator.v0.8.0/Redis my-redis-service --inlined\nSuccessfully added service to the configuration; do 'odo push' to create service on the cluster\n\n$ cat devfile.yaml\n[...]\ncomponents:\n- kubernetes:\n    inlined: |\n      apiVersion: redis.redis.opstreelabs.in/v1beta1\n      kind: Redis\n      metadata:\n        name: my-redis-service\n      spec:\n        kubernetesConfig:\n          image: quay.io/opstree/redis:v6.2.5\n          imagePullPolicy: IfNotPresent\n          resources:\n            limits:\n              cpu: 101m\n              memory: 128Mi\n            requests:\n              cpu: 101m\n              memory: 128Mi\n          serviceType: ClusterIP\n        redisExporter:\n          enabled: false\n          image: quay.io/opstree/redis-exporter:1.0\n        storage:\n          volumeClaimTemplate:\n            spec:\n              accessModes:\n              - ReadWriteOnce\n              resources:\n                requests:\n                  storage: 1Gi\n  name: my-redis-service\n[...]\n")),(0,o.kt)("h3",{id:"configuring-the-service"},"Configuring the service"),(0,o.kt)("p",null,"Without specific indication, the service will be created with a default configuration. You can use either command-line arguments or a file to specify your own configuration."),(0,o.kt)("h4",{id:"using-command-line-arguments"},"Using command-line arguments"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--parameters")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"-p"),") flag to specify your own configuration."),(0,o.kt)("p",null,"In the following example, we will configure the Redis service with three parameters:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service create redis-operator.v0.8.0/Redis my-redis-service \\\n    -p kubernetesConfig.image=quay.io/opstree/redis:v6.2.5 \\\n    -p kubernetesConfig.serviceType=ClusterIP \\\n    -p redisExporter.image=quay.io/opstree/redis-exporter:1.0\nSuccessfully added service to the configuration; do 'odo push' to create service on the cluster\n\n$ cat kubernetes/odo-service-my-redis-service.yaml \napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: Redis\nmetadata:\n  name: my-redis-service\nspec:\n  kubernetesConfig:\n    image: quay.io/opstree/redis:v6.2.5\n    serviceType: ClusterIP\n  redisExporter:\n    image: quay.io/opstree/redis-exporter:1.0\n")),(0,o.kt)("p",null,"You can obtain the possible parameters for a specific service from the ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-reference/catalog/#getting-information-about-a-service"},(0,o.kt)("inlineCode",{parentName:"a"},"odo catalog describe service")," command"),"."),(0,o.kt)("h4",{id:"using-a-file"},"Using a file"),(0,o.kt)("p",null,"You can use a YAML manifest to specify your own specification."),(0,o.kt)("p",null,"In the following example, we will configure the Redis service with three parameters. For this, first create a manifest:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ cat > my-redis.yaml <<EOF\napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: Redis\nmetadata:\n  name: my-redis-service\nspec:\n  kubernetesConfig:\n    image: quay.io/opstree/redis:v6.2.5\n    serviceType: ClusterIP\n  redisExporter:\n    image: quay.io/opstree/redis-exporter:1.0\nEOF\n")),(0,o.kt)("p",null,"Then create the service from the manifest:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service create --from-file my-redis.yaml\nSuccessfully added service to the configuration; do 'odo push' to create service on the cluster\n")),(0,o.kt)("h2",{id:"deleting-a-service"},"Deleting a service"),(0,o.kt)("p",null,"You can delete a service with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"odo service delete\n")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service list\nNAME                       MANAGED BY ODO     STATE               AGE\nRedis/my-redis-service     Yes (api)          Deleted locally     5m39s\n\n$ odo service delete Redis/my-redis-service\n? Are you sure you want to delete Redis/my-redis-service Yes\nService \"Redis/my-redis-service\" has been successfully deleted; do 'odo push' to delete service from the cluster\n")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--force")," (or ",(0,o.kt)("inlineCode",{parentName:"p"},"-f"),") flag to force the deletion of the service without confirmation."),(0,o.kt)("h2",{id:"listing-services"},"Listing services"),(0,o.kt)("p",null,"You can get the list of services created for your component with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"odo service list\n")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service list\nNAME                       MANAGED BY ODO     STATE             AGE\nRedis/my-redis-service-1   Yes (api)          Not pushed     \nRedis/my-redis-service-2   Yes (api)          Pushed            52s\nRedis/my-redis-service-3   Yes (api)          Deleted locally   1m22s\n")),(0,o.kt)("p",null,"For each service, ",(0,o.kt)("inlineCode",{parentName:"p"},"STATE")," indicates if the service has been pushed to the cluster using ",(0,o.kt)("inlineCode",{parentName:"p"},"odo push"),", or if the service is still running on the cluster but removed from the devfile locally using ",(0,o.kt)("inlineCode",{parentName:"p"},"odo service delete"),"."),(0,o.kt)("h2",{id:"getting-information-about-a-service"},"Getting information about a service"),(0,o.kt)("p",null,"You can get the details about a service such as its kind, version, name and list of configured parameters with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"odo service describe\n")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ odo service describe Redis/my-redis-service\nVersion: redis.redis.opstreelabs.in/v1beta1\nKind: Redis\nName: my-redis-service\nParameters:\nNAME                           VALUE\nkubernetesConfig.image         quay.io/opstree/redis:v6.2.5\nkubernetesConfig.serviceType   ClusterIP\nredisExporter.image            quay.io/opstree/redis-exporter:1.0\n")))}p.isMDXComponent=!0}}]);