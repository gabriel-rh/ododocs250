"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[20],{3905:function(e,t,o){o.d(t,{Zo:function(){return s},kt:function(){return u}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(o),u=r,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||a;return o?n.createElement(h,i(i({ref:t},s),{},{components:o})):n.createElement(h,i({ref:t},s))}));function u(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=o[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},2028:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var n=o(7462),r=o(3366),a=(o(7294),o(3905)),i=["components"],c={title:"Create Component",sidebar_position:1,sidebar_label:"Creating components"},p={unversionedId:"using-odo/create-component",id:"using-odo/create-component",isDocsHomePage:!1,title:"Creating components using odo",description:"Component is the most basic unit of operation for odo. And the way to create one is using odo create (short for odo component create) command.",source:"@site/docs/using-odo/create-component.md",sourceDirName:"using-odo",slug:"/using-odo/create-component",permalink:"/ododocs250/docs/using-odo/create-component",editUrl:"https://github.com/redhat-developer/odo/edit/main/website/docs/using-odo/create-component.md",version:"current",sidebar_label:"Creating components",sidebarPosition:1,frontMatter:{title:"Create Component",sidebar_position:1,sidebar_label:"Creating components"},sidebar:"tutorialSidebar",previous:{title:"Configuring odo global settings",permalink:"/ododocs250/docs/getting-started/configure"},next:{title:"Create URLs using odo",permalink:"/ododocs250/docs/using-odo/create-url"}},l=[{value:"Creating a component interactively",id:"creating-a-component-interactively",children:[]},{value:"Creating a component non-interactively",id:"creating-a-component-non-interactively",children:[]},{value:"Starter projects",id:"starter-projects",children:[{value:"Starer projects in interactive mode",id:"starer-projects-in-interactive-mode",children:[]},{value:"Starter projects in non-interactive mode",id:"starter-projects-in-non-interactive-mode",children:[]}]},{value:"Push the component to Kubernetes",id:"push-the-component-to-kubernetes",children:[]}],s={toc:l};function d(e){var t=e.components,o=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"../getting-started/basics#component"},"Component")," is the most basic unit of operation for odo. And the way to create one is using ",(0,a.kt)("inlineCode",{parentName:"p"},"odo create")," (short for ",(0,a.kt)("inlineCode",{parentName:"p"},"odo component create"),") command."),(0,a.kt)("p",null,'In simplest terms, when you "create" an odo component, you populate your current working directory with the file ',(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml"),". A Devfile is a manifest file that contains information about various resources (URL, Storage, Services, etc.) that correspond to your component, and will be created on the Kubernetes cluster when you execute ",(0,a.kt)("inlineCode",{parentName:"p"},"odo push")," command. Most odo commands will first modify (add or remove configuration from) this file, and then subsequent ",(0,a.kt)("inlineCode",{parentName:"p"},"odo push")," will create or delete the resources from the Kubernetes cluster."),(0,a.kt)("p",null,"However, odo users are not expected to know how the ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," is organized; it is the odo commands that would create, update, or delete it."),(0,a.kt)("p",null,"One final thing to keep in mind - there can be only one odo component in a directory. Nesting odo components is not expected to work well. In other terms, if you have multiple parts (components), say frontend and backend, of your microservices application that you want to create odo components for, you should put them in separate directories and not try to nest them. Take a look at example structure below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ tree my-awesome-microservices-app \nmy-awesome-microservices-app\n\u251c\u2500\u2500 backend\n\u2502   \u2514\u2500\u2500 devfile.yaml\n\u2514\u2500\u2500 frontend\n    \u2514\u2500\u2500 devfile.yaml\n")),(0,a.kt)("p",null,"In this guide, we are going to create a Spring Boot component and a Nodejs component to deploy parts of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dharmit/odo-quickstart"},"odo quickstart")," project to a Kubernetes cluster."),(0,a.kt)("p",null,"Let's clone the project first:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/dharmit/odo-quickstart\ncd odo-quickstart\n")),(0,a.kt)("p",null,"Next, create a project "," on the Kubernetes cluster in which we will be creating our component. This is to keep our Kubernetes cluster clean of the tasks we perform (this step is optional):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"odo project create myproject\n")),(0,a.kt)("p",null,"Alternatively, you could also use one of the existing projects on the cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"odo project list\n")),(0,a.kt)("p",null,"Now, set the project in which you want to create the component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# replace <project-name> with a valid value from the list\nodo project set <project-name>\n")),(0,a.kt)("p",null,"odo supports interactive and non-interactive ways of creating a component. We will create the Spring Boot component interactively and Nodejs component non-interactively. The Spring Boot component is in ",(0,a.kt)("inlineCode",{parentName:"p"},"backend")," directory. It contains code for the REST API that our Nodejs component will be interacting with. This Nodejs component is in ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," directory."),(0,a.kt)("h2",{id:"creating-a-component-interactively"},"Creating a component interactively"),(0,a.kt)("p",null,"To interactively create the Spring Boot component, ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," into the cloned project (already done if you copy-pasted the command above), then ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"backend")," directory, and execute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd backend\nodo create\n")),(0,a.kt)("p",null,"You will be prompted with a few questions one after the another. Go through each one of them to create a component."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"First question is about selecting the component type:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create\n? Which devfile component type do you wish to create  [Use arrows to move, enter to select, type to filter]\n> java-maven\njava-maven\njava-openliberty\njava-openliberty\njava-quarkus\njava-quarkus\njava-springboot\n")),(0,a.kt)("p",{parentName:"li"},"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"java-maven")," is selected for us. Since this is a Spring Boot application, we should be selecting ",(0,a.kt)("inlineCode",{parentName:"p"},"java-springboot"),". "),(0,a.kt)("p",{parentName:"li"}," We can either scroll down to ",(0,a.kt)("inlineCode",{parentName:"p"},"java-springboot")," using the arrow key, or start typing ",(0,a.kt)("inlineCode",{parentName:"p"},"spring")," on the prompt. Typing ",(0,a.kt)("inlineCode",{parentName:"p"},"spring")," will lead to odo filtering the component type based on your input.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Next, odo asks you to name the component:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create                \n? Which devfile component type do you wish to create java-springboot\n? What do you wish to name the new devfile component (java-springboot) backend\n")),(0,a.kt)("p",{parentName:"li"},"Name it ",(0,a.kt)("inlineCode",{parentName:"p"},"backend"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Next, odo asks you for the project in which you would like to create the component. Use the project ",(0,a.kt)("inlineCode",{parentName:"p"},"myproject")," that we created earlier or the one you had set using ",(0,a.kt)("inlineCode",{parentName:"p"},"odo project set")," command"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create\n? Which devfile component type do you wish to create java-springboot\n? What do you wish to name the new devfile component java-springboot\n? What project do you want the devfile component to be created in myproject\n")),(0,a.kt)("p",{parentName:"li"},"Now you will have a ",(0,a.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," in your current working directory. But odo is not done asking you questions yet.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'Lastly, odo asks you if you would like to download a "starter project". Since we already cloned the odo-quickstart project, we answer in No by typing ',(0,a.kt)("inlineCode",{parentName:"p"},"n")," and hitting the return key. We discuss starter projects later in ",(0,a.kt)("a",{parentName:"p",href:"#starter-projects"},"this document"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create\n? Which devfile component type do you wish to create java-springboot\n? What do you wish to name the new devfile component java-springboot\n? What project do you want the devfile component to be created in myproject\nDevfile Object Validation\n\u2713  Checking devfile existence [66186ns]\n\u2713  Creating a devfile component from registry: stage [92202ns]\nValidation\n\u2713  Validating if devfile name is correct [99609ns]\n? Do you want to download a starter project (y/N) n\n")))),(0,a.kt)("p",null,"Your Spring Boot component is now ready for use."),(0,a.kt)("h2",{id:"creating-a-component-non-interactively"},"Creating a component non-interactively"),(0,a.kt)("p",null,"To non-interactively create the Nodejs component to deploy our frontend code, ",(0,a.kt)("inlineCode",{parentName:"p"},"cd")," into the cloned ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," directory and execute:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# assuming you are in the odo-quickstart/backend directory\ncd ../frontend \nodo create nodejs frontend -n myproject\n")),(0,a.kt)("p",null,"Here ",(0,a.kt)("inlineCode",{parentName:"p"},"nodejs")," is the type of the component, ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," is the name of the component, and ",(0,a.kt)("inlineCode",{parentName:"p"},"-n myproject")," tells odo to use the project ",(0,a.kt)("inlineCode",{parentName:"p"},"myproject")," for the mentioned ",(0,a.kt)("inlineCode",{parentName:"p"},"odo create")," operation."),(0,a.kt)("h2",{id:"starter-projects"},"Starter projects"),(0,a.kt)("p",null,'Besides creating a component for an existing code, you could also use "starter project" when creating a component.'),(0,a.kt)("p",null,"Starter projects are example projects developed by the community to showcase the usability of devfiles. An odo user can use these starter projects by running ",(0,a.kt)("inlineCode",{parentName:"p"},"odo create")," command in an empty directory."),(0,a.kt)("h3",{id:"starer-projects-in-interactive-mode"},"Starer projects in interactive mode"),(0,a.kt)("p",null,"To interactively create a Java Spring Boot component using the starter project, you can follow the below steps:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir myOdoComponent && cd myOdoComponent\nodo create\n")),(0,a.kt)("p",null,"In the questions that odo asks you next, provide answers like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create\n? Which devfile component type do you wish to create java-springboot\n? What do you wish to name the new devfile component myFirstComponent\n? What project do you want the devfile component to be created in myproject\nDevfile Object Validation\n \u2713  Checking devfile existence [60122ns]\n \u2713  Creating a devfile component from registry: stage [91411ns]\nValidation\n \u2713  Validating if devfile name is correct [35749ns]\n? Do you want to download a starter project Yes\n\nStarter Project\n \u2713  Downloading starter project springbootproject from https://github.com/odo-devfiles/springboot-ex.git [716ms]\n\nPlease use `odo push` command to create the component with source deployed\n")),(0,a.kt)("h3",{id:"starter-projects-in-non-interactive-mode"},"Starter projects in non-interactive mode"),(0,a.kt)("p",null,"To non-interactively create a Java Spring Boot component using the starter project, you can follow the below steps:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir myOdoComponent && cd myOdoComponent\nodo create java-springboot myFirstComponent --starter springbootproject\n")),(0,a.kt)("h2",{id:"push-the-component-to-kubernetes"},"Push the component to Kubernetes"),(0,a.kt)("p",null,'odo follows a "create & push" workflow for almost all the commands. Meaning, most odo commands won\'t create resources on Kubernetes cluster unless you run ',(0,a.kt)("inlineCode",{parentName:"p"},"odo push")," command."),(0,a.kt)("p",null,"Among the various ways described above, irrespective of how you created the component, the next step to create the resources for our component on the cluster would be to run ",(0,a.kt)("inlineCode",{parentName:"p"},"odo push"),"."),(0,a.kt)("p",null,"Execute below command from the component directory of both the ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"backend")," components:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"odo push\n")))}d.isMDXComponent=!0}}]);