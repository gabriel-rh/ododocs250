"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[9258],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9969:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],l={title:"Breaking changes in odo 2.2",author:"Girish Ramnani",author_url:"https://github.com/girishramnani",author_image_url:"https://avatars.githubusercontent.com/u/6551988?v=4",tags:["release"],slug:"breaking-changes-in-odo-2.2"},s={permalink:"/ododocs250/blog/breaking-changes-in-odo-2.2",editUrl:"https://github.com/redhat-developer/odo/edit/main/website/blog/blog/2021-05-04-breaking-changes-in-odo-2.2.md",source:"@site/blog/2021-05-04-breaking-changes-in-odo-2.2.md",title:"Breaking changes in odo 2.2",description:"Breaking changes in odo 2.2",date:"2021-05-04T00:00:00.000Z",formattedDate:"May 4, 2021",tags:[{label:"release",permalink:"/ododocs250/blog/tags/release"}],readingTime:2.55,truncated:!0,prevItem:{title:"odo 2.4.3 Released",permalink:"/ododocs250/blog/odo-243-release"},nextItem:{title:"odo 2.0.1 Release",permalink:"/ododocs250/blog/odo-201-release"}},d=[{value:"Breaking changes in odo 2.2",id:"breaking-changes-in-odo-22",children:[]},{value:"Known bugs and limitations",id:"known-bugs-and-limitations",children:[]},{value:"Frequently asked questions",id:"frequently-asked-questions",children:[]}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Breaking changes in odo 2.2"),(0,r.kt)("h3",{id:"breaking-changes-in-odo-22"},"Breaking changes in odo 2.2"),(0,r.kt)("p",null,"This document outlines the breaking changes that were introduced in odo 2.2. With the increased adoption of ",(0,r.kt)("a",{parentName:"p",href:"https://devfile.github.io/"},"Devfile")," we have started to reduce odo\u2019s dependency on S2I(Source-to-Image). If you do not work with S2I, then you can stop reading here."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"odo create --s2i <component-type>")," ",(0,r.kt)("strong",{parentName:"p"},"will create a converted Devfile based component on the S2I images of that component type.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo create --s2i nodejs\n")),(0,r.kt)("p",{parentName:"li"},"Output -"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create nodejs --s2i\nValidation\n \u2713  Validating component [424ms]\nConversion\n \u2713  Successfully generated devfile.yaml and env.yaml for provided S2I component\n\nPlease use `odo push` command to create the component with source deployed\n")),(0,r.kt)("p",{parentName:"li"},"The above command would generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"devfile.yaml")," which would be using the S2I images and variables that are part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodejs"),"."),(0,r.kt)("p",{parentName:"li"},"This change will not break any existing S2I components. Although you are encouraged to convert them to devfile using ",(0,r.kt)("inlineCode",{parentName:"p"},"odo utils convert-to-devfile"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Currently devfile components do not support ",(0,r.kt)("inlineCode",{parentName:"strong"},"--git")," and ",(0,r.kt)("inlineCode",{parentName:"strong"},"--binary")," components hence we still use S2I component flow to create them.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo create java --s2i --git ./build.war\nValidation\n \u2713  Validating component [431ms]\n\nPlease use `odo push` command to create the component with source deployed\n\n")),(0,r.kt)("p",{parentName:"li"},"Observe that there was no conversion done here."))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"odo env set DebugPort")," won't work with converted devfile components, you would need to use ",(0,r.kt)("inlineCode",{parentName:"strong"},"odo config set --env DEBUG_PORT")," instead.")),(0,r.kt)("p",{parentName:"li"},"Currently, the ",(0,r.kt)("inlineCode",{parentName:"p"},"wildfly")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dotnet")," component types do not work when converted. We have an issue open for this - ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redhat-developer/odo/issues/4623"},"https://github.com/redhat-developer/odo/issues/4623")))),(0,r.kt)("h3",{id:"known-bugs-and-limitations"},"Known bugs and limitations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redhat-developer/odo/issues/4623"},"https://github.com/redhat-developer/odo/issues/4623")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redhat-developer/odo/issues/4615"},"https://github.com/redhat-developer/odo/issues/4615")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redhat-developer/odo/issues/4594"},"https://github.com/redhat-developer/odo/issues/4594")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/redhat-developer/odo/issues/4593"},"https://github.com/redhat-developer/odo/issues/4593"))),(0,r.kt)("h3",{id:"frequently-asked-questions"},"Frequently asked questions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Why does odo fail create to URL using ",(0,r.kt)("inlineCode",{parentName:"p"},"odo url create")," for a component created using ",(0,r.kt)("inlineCode",{parentName:"p"},"odo create --s2i")," even though ",(0,r.kt)("inlineCode",{parentName:"p"},"odo url create")," is allowed for devfile?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It won\u2019t fail in the sense that if you tried the conventional s2i approach and try to create ",(0,r.kt)("inlineCode",{parentName:"li"},"odo url create")," it would fail with url for 8080 port already present as there would already be one for you. Refer - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redhat-developer/odo/issues/4621"},"https://github.com/redhat-developer/odo/issues/4621")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"How to understand the status of the debug?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"odo env set DebugPort")," won't work, instead you would need to use ",(0,r.kt)("inlineCode",{parentName:"li"},"odo config set --env DEBUG_PORT")," - this is because the s2i to devfile converted devfiles don't have a debug type command defined in them. We would fix this too."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If every component will now be reported as devfile component, then what about existing S2I components?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"They should work as is. Check ",(0,r.kt)("inlineCode",{parentName:"li"},"odo list")," for a simpler check. Somethings might still break since it is quite complex to make things work across the board.")))),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If oc based checks in tests are not going to work, is there an alternative odo support around it ?"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It would\u2019t be right to say that you cannot use ",(0,r.kt)("inlineCode",{parentName:"li"},"oc")," based checks, but they would break because now the s2i components are being converted to devfile, odo would generate a Kubernetes ",(0,r.kt)("inlineCode",{parentName:"li"},"Deployment")," but the ",(0,r.kt)("inlineCode",{parentName:"li"},"oc")," would try to find a ",(0,r.kt)("inlineCode",{parentName:"li"},"DeploymentConfig")," on the cluster.")))))}u.isMDXComponent=!0}}]);