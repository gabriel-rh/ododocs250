"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[3039],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?o.createElement(m,s(s({ref:t},p),{},{components:n})):o.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},694:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),s=["components"],i={title:"Quickstart",sidebar_position:3},l={unversionedId:"getting-started/quickstart",id:"getting-started/quickstart",isDocsHomePage:!1,title:"Quickstart",description:"In this guide, we will be using odo to set up a todo application based on Java Spring Boot framework for the backend/APIs, ReactJS for the frontend, and PostgreSQL database to store the todo items.",source:"@site/docs/getting-started/quickstart.md",sourceDirName:"getting-started",slug:"/getting-started/quickstart",permalink:"/ododocs250/docs/getting-started/quickstart",editUrl:"https://github.com/redhat-developer/odo/edit/main/website/docs/getting-started/quickstart.md",version:"current",sidebarPosition:3,frontMatter:{title:"Quickstart",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"odo concepts",permalink:"/ododocs250/docs/getting-started/basics"},next:{title:"Setting up a Kubernetes cluster",permalink:"/ododocs250/docs/getting-started/cluster-setup/kubernetes"}},c=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Create a project",id:"create-a-project",children:[]},{value:"Clone the code",id:"clone-the-code",children:[]},{value:"Create the backend component",id:"create-the-backend-component",children:[]},{value:"Create the Postgres database",id:"create-the-postgres-database",children:[]},{value:"Link the backend component and the database",id:"link-the-backend-component-and-the-database",children:[]},{value:"Create the frontend component",id:"create-the-frontend-component",children:[]},{value:"Link the frontend and backend components",id:"link-the-frontend-and-backend-components",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this guide, we will be using odo to set up a todo application based on Java Spring Boot framework for the backend/APIs, ReactJS for the frontend, and PostgreSQL database to store the todo items."),(0,r.kt)("p",null,"We will be performing following tasks using odo in this guide:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a project"),(0,r.kt)("li",{parentName:"ol"},"Create an odo component for both the frontend and backend applications"),(0,r.kt)("li",{parentName:"ol"},"Create an Operator backed service for PostgreSQL database"),(0,r.kt)("li",{parentName:"ol"},"Link the backend component with the PostgreSQL service"),(0,r.kt)("li",{parentName:"ol"},"Link the frontend component with the backend component")),(0,r.kt)("p",null,"At the end of the guide, you will be able to list, add and delete todo items from the web browser."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"/ododocs250/docs/getting-started/cluster-setup/kubernetes"},"development Kubernetes")," cluster with ",(0,r.kt)("a",{parentName:"li",href:"./cluster-setup/kubernetes#installing-the-operator-lifecycle-manager-olm"},"Operator Lifecycle Manager")," setup on it.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This guide is written for minikube users, hence you will notice the usage of ",(0,r.kt)("inlineCode",{parentName:"li"},"minikube ip")," command to get the IP address of the Kubernetes cluster."),(0,r.kt)("li",{parentName:"ul"},"If you are using a Kubernetes cluster other than minikube, you will need to check with cluster administrator for the cluster IP to be used with ",(0,r.kt)("inlineCode",{parentName:"li"},"--host")," flag."),(0,r.kt)("li",{parentName:"ul"},"If you are using ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/code-ready/crc"},"Code Ready Containers (CRC)")," or another form of OpenShift cluster, you can skip the part of ",(0,r.kt)("inlineCode",{parentName:"li"},"odo url create")," because odo automatically creates URL for the component using ",(0,r.kt)("a",{parentName:"li",href:"https://docs.openshift.com/container-platform/latest/networking/routes/route-configuration.html"},"OpenShift Routes"),". "))),(0,r.kt)("li",{parentName:"ul"},"Install the ",(0,r.kt)("a",{parentName:"li",href:"https://operatorhub.io/operator/postgresql"},"Crunchy Postgres Operator")," on the cluster. Assuming you have admin privileges on the development Kubernetes cluster, you can install it using below command:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create -f https://operatorhub.io/install/postgresql.yaml\n"))),(0,r.kt)("li",{parentName:"ul"},"Have the odo binary ",(0,r.kt)("a",{parentName:"li",href:"/ododocs250/docs/getting-started/installation"},"installed")," on your system.")),(0,r.kt)("h2",{id:"create-a-project"},"Create a project"),(0,r.kt)("p",null,"We will create a project named ",(0,r.kt)("inlineCode",{parentName:"p"},"quickstart")," on the cluster to keep quickstart related activities separate from rest of the cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo project create quickstart\n")),(0,r.kt)("h2",{id:"clone-the-code"},"Clone the code"),(0,r.kt)("p",null,"Clone ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dharmit/odo-quickstart/"},"this git repository")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," into it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/dharmit/odo-quickstart\ncd odo-quickstart\n")),(0,r.kt)("h2",{id:"create-the-backend-component"},"Create the backend component"),(0,r.kt)("p",null,"First we create a component for the backend application which is a Java Spring Boot based REST API. It will help us list, insert and delete todos from the database. Execute below steps:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd backend\nodo create java-springboot backend\nodo url create --port 8080 --host `minikube ip`.nip.io\nodo push\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"minikube ip")," command helps get the IP address of the minikube instance. It is required to create a URL accesible from the web browser of the host system on which minikube is running."),(0,r.kt)("h2",{id:"create-the-postgres-database"},"Create the Postgres database"),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"#prerequisites"},"prerequisites")," section, we installed Postgres Operator. Before being able to create a service using it, first ensure that the Operator is installed correctly. You should see the Postgres Operator like in below output. Note that you might see more Operators in the output if there are other Operators installed on your cluster: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo catalog list services\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo catalog list services\nServices available through Operators\nNAME                        CRDs\npostgresoperator.v5.0.3     PostgresCluster\n")),(0,r.kt)("p",null,"If you don't see the Postgres Operator here, it might be still installing. Take a look at what you see in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PHASE")," column in below output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get csv\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl get csv                         \nNAME                      DISPLAY                           VERSION   REPLACES                  PHASE\npostgresoperator.v5.0.3   Crunchy Postgres for Kubernetes   5.0.3     postgresoperator.v5.0.2   Succeeded\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"PHASE")," is something other than ",(0,r.kt)("inlineCode",{parentName:"p"},"Succeeded"),", you won't see it in ",(0,r.kt)("inlineCode",{parentName:"p"},"odo catalog list services")," output, and you won't be able to create a working Operator backed service out of it either."),(0,r.kt)("p",null,"Now create the service using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"odo service create --from-file ../postgrescluster.yaml\n")),(0,r.kt)("p",null,"Example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ odo service create --from-file ../postgrescluster.yaml\nSuccessfully added service to the configuration; do 'odo push' to create service on the cluster\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"postgrescluster.yaml")," file in the repository contains configuration that should help bring up a Postgres database. Do a push to create the database on the cluster:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo push\n")),(0,r.kt)("h2",{id:"link-the-backend-component-and-the-database"},"Link the backend component and the database"),(0,r.kt)("p",null,"Next, we need to link the backend component with the database. Let's get the information about the database service first:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo service list\n")),(0,r.kt)("p",null,"Example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo service list\nNAME                      MANAGED BY ODO     STATE      AGE\nPostgresCluster/hippo     Yes (backend)      Pushed     3m42s\n")),(0,r.kt)("p",null,"Now, let's link the backend component with the above service using:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo link PostgresCluster/hippo\nodo push\n")),(0,r.kt)("p",null,"Now, get the URL (",(0,r.kt)("inlineCode",{parentName:"p"},"odo url list"),") for the backend component, append ",(0,r.kt)("inlineCode",{parentName:"p"},"api/v1/todos")," to it and open it on your browser:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo url list\n")),(0,r.kt)("p",null,"Example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ odo url list\nFound the following URLs for component backend\nNAME         STATE      URL                                       PORT     SECURE     KIND\n8080-tcp     Pushed     http://8080-tcp.192.168.39.117.nip.io     8080     false      ingress\n")),(0,r.kt)("p",null,"In this case, the URL to load in browser would be ",(0,r.kt)("inlineCode",{parentName:"p"},"http://8080-tcp.192.168.39.117.nip.io/api/v1/todos"),". Note that the URL would be different in your case depending on what the minikube VM's IP is. When you load the URL in the browser, you should see an empty list:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"[]\n")),(0,r.kt)("h2",{id:"create-the-frontend-component"},"Create the frontend component"),(0,r.kt)("p",null,"Our frontend component is a React application that communicates with the backend component. Create the frontend component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd ../frontend\nodo create nodejs frontend\nodo url create --port 3000 --host `minikube ip`.nip.io\nodo push\n")),(0,r.kt)("p",null,"Open the URL for the component in the browser, but note that you won't be able to add, remove or list the todos yet because we haven't linked the frontend and the backend components:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo url list\n")),(0,r.kt)("h2",{id:"link-the-frontend-and-backend-components"},"Link the frontend and backend components"),(0,r.kt)("p",null,"To link the frontend component to backend:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"odo link backend\nodo push\n")),(0,r.kt)("p",null,"Now reload the URL of frontend component and try adding and removing some todo items. The list of items appears by default on the same page just below the input box that reads ",(0,r.kt)("inlineCode",{parentName:"p"},"Add a new task"),"."))}d.isMDXComponent=!0}}]);