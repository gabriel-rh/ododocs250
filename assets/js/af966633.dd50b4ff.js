"use strict";(self.webpackChunkodo_dev=self.webpackChunkodo_dev||[]).push([[3968],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),f=r,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4034:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={title:"Basics",sidebar_position:3},c={unversionedId:"getting-started/basics",id:"getting-started/basics",isDocsHomePage:!1,title:"odo concepts",description:"odo abstracts Kubernetes concepts into a developer friendly terminology; in this document, we will take a look at these terminologies.",source:"@site/docs/getting-started/basics.md",sourceDirName:"getting-started",slug:"/getting-started/basics",permalink:"/ododocs250/docs/getting-started/basics",editUrl:"https://github.com/redhat-developer/odo/edit/main/website/docs/getting-started/basics.md",version:"current",sidebarPosition:3,frontMatter:{title:"Basics",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Features provided by odo",permalink:"/ododocs250/docs/getting-started/features"},next:{title:"Quickstart",permalink:"/ododocs250/docs/getting-started/quickstart"}},l=[],p={toc:l};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"odo abstracts Kubernetes concepts into a developer friendly terminology; in this document, we will take a look at these terminologies."),(0,i.kt)("h4",{id:"application"},"Application"),(0,i.kt)("p",null,"  An application in odo is a classic application developed with a ",(0,i.kt)("a",{parentName:"p",href:"https://www.redhat.com/en/topics/cloud-native-apps"},"cloud-native approach")," that is used to perform a particular task."),(0,i.kt)("p",null,"  Examples of applications: Online Video Streaming, Hotel Reservation System, Online Shopping."),(0,i.kt)("h4",{id:"component"},"Component"),(0,i.kt)("p",null,"  In the cloud-native architecture, an application is a collection of small, independent, and loosely coupled components; an odo component is one of these components."),(0,i.kt)("p",null,"  Examples of components: API Backend, Web Frontend, Payment Backend."),(0,i.kt)("h4",{id:"project"},"Project"),(0,i.kt)("p",null,"  A project helps achieve multi-tenancy: several applications can be run in the same cluster by different teams in different projects."),(0,i.kt)("h4",{id:"context"},"Context"),(0,i.kt)("p",null,"  A context is the directory on the system that contains the source code, tests, libraries and odo specific config files for a single component."),(0,i.kt)("h4",{id:"url"},"URL"),(0,i.kt)("p",null,"  A URL exposes a component to be accessed from outside the cluster."),(0,i.kt)("h4",{id:"storage"},"Storage"),(0,i.kt)("p",null,"  A storage is a persistent storage in the cluster: it persists the data across restarts and rebuilds of a component."),(0,i.kt)("h4",{id:"service"},"Service"),(0,i.kt)("p",null,"  A service is an external application that a component can connect to or depend on to gain an additional functionality."),(0,i.kt)("p",null,"  Example of services: MySQL, Redis."),(0,i.kt)("h4",{id:"devfile"},"Devfile"),(0,i.kt)("p",null,"  A devfile is a portable YAML file containing the definition of a component and its related URLs, storages and services. See Devfile "," to know more about devfile."))}d.isMDXComponent=!0}}]);